from pathlib import Path
from textwrap import dedent

import pytest

from src.routes import (
    RustBinaryDefinition,
    read_route_binary_definitions_from_rust_project,
)


def test_reading_of_route_binary_definitions(tmp_path: Path):
    project_root = tmp_path

    manifest = project_root.joinpath("Cargo.toml")
    manifest.write_text(dedent("""\
        # -- AUTOGENERATED: Route Handler Binaries (Below)
        [[bin]]
        name = "name-of-first-binary"
        path = "path/to/first/binary"
        [[bin]]
        name = "name-of-second-binary"
        path = "path/to/second/binary"
        # -- AUTOGENERATED: Route Handler Binaries (Above)
        """))

    binary_definitions = list(read_route_binary_definitions_from_rust_project(project_root))
    assert len(binary_definitions) == 2
    # We don't care about ordering, so don't assert on the full list's structure
    assert RustBinaryDefinition(
        name = "name-of-first-binary",
        path = project_root.joinpath("path/to/first/binary"),
    ) in binary_definitions
    assert RustBinaryDefinition(
        name = "name-of-second-binary",
        path = project_root.joinpath("path/to/second/binary"),
    ) in binary_definitions


def test_reading_of_route_binary_definitions_ignores_irrelevant_toml_contents(tmp_path: Path):
    project_root = tmp_path

    manifest = project_root.joinpath("Cargo.toml")
    manifest.write_text(dedent("""\
        Things outside of the fenced block should just be ignored.

        They don't even have to be valid TOML (like this text) - this function
        is _not_ intended to become a Cargo.toml validator!

        # -- AUTOGENERATED: Route Handler Binaries (Below)
        [[bin]]
        name = "name-of-binary"
        # Unexpected content _inside_ the fenced block should be ignored, but
        # in this case we do (currently) require it to be valid TOML since this
        # will be parsed.
        extra-key = "should be ignored"
        path = "path/to/binary"
        [bonus]
        relevant = false
        # -- AUTOGENERATED: Route Handler Binaries (Above)

        And here's more non-valid TOML outside of the fenced block.
        """))

    binary_definitions = list(read_route_binary_definitions_from_rust_project(project_root))
    assert binary_definitions == [ RustBinaryDefinition(
        name = "name-of-binary",
        path = project_root.joinpath("path/to/binary"),
    ) ]


def _test_missing_route_binary_definitions_section(project_root: Path, manifest_contents: str):
    manifest = project_root.joinpath("Cargo.toml")
    manifest.write_text(manifest_contents)
    with pytest.raises(Exception, match = "missing an auto-generated route definitions section"):
        # wrap with list() to actually consume the iterator
        list(read_route_binary_definitions_from_rust_project(project_root))
def test_reading_of_route_binary_definitions_errors_if_no_boundaries(tmp_path: Path):
    _test_missing_route_binary_definitions_section(tmp_path, dedent("""\
        [package]
        without = "a fenced section"
        [[bin]]
        name = "name-of-binary"
        path = "path/to/binary"
        """))
def test_reading_of_route_binary_definitions_errors_if_no_start_of_boundary(tmp_path: Path):
    _test_missing_route_binary_definitions_section(tmp_path, dedent("""\
        [package]
        without = "a start to the fenced section"
        [[bin]]
        name = "name-of-binary"
        path = "path/to/binary"
        # -- AUTOGENERATED: Route Handler Binaries (Above)
        """))
def test_reading_of_route_binary_definitions_errors_if_no_end_to_boundary(tmp_path: Path):
    _test_missing_route_binary_definitions_section(tmp_path, dedent("""\
        [package]
        without = "an end to the fenced section"
        [[bin]]
        # -- AUTOGENERATED: Route Handler Binaries (Below)
        name = "name-of-binary"
        path = "path/to/binary"
        """))

def _test_invalid_route_binary_definitions_section(project_root: Path, manifest_contents: str):
    manifest = project_root.joinpath("Cargo.toml")
    manifest.write_text(manifest_contents)
    with pytest.raises(Exception, match = "invalid auto-generated route definitions section"):
        # wrap with list() to actually consume the iterator
        list(read_route_binary_definitions_from_rust_project(project_root))
def test_reading_of_route_binary_definitions_errors_if_section_has_no_binaries(tmp_path: Path):
    _test_invalid_route_binary_definitions_section(tmp_path, dedent("""\
        # -- AUTOGENERATED: Route Handler Binaries (Below)
        name = "name-of-binary"
        path = "path/to/binary"
        # -- AUTOGENERATED: Route Handler Binaries (Above)
        """))
def test_reading_of_route_binary_definitions_errors_if_binary_has_no_path(tmp_path: Path):
    _test_invalid_route_binary_definitions_section(tmp_path, dedent("""\
        # -- AUTOGENERATED: Route Handler Binaries (Below)
        [[bin]]
        name = "missing-a-path"
        # -- AUTOGENERATED: Route Handler Binaries (Above)
        """))
def test_reading_of_route_binary_definitions_errors_if_binary_has_no_name(tmp_path: Path):
    _test_invalid_route_binary_definitions_section(tmp_path, dedent("""\
        # -- AUTOGENERATED: Route Handler Binaries (Below)
        [[bin]]
        path = "missing/a/name"
        # -- AUTOGENERATED: Route Handler Binaries (Above)
        """))
